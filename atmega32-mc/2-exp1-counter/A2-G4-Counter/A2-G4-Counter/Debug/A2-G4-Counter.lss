
A2-G4-Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060e  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000238  00000000  00000000  00000d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003e  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001305  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	// set push button input pin to PA4
	// PA4 is connected with push button: 1 when pressed
	DDRA = 0xEF; // 1110 1111
  6c:	8f ee       	ldi	r24, 0xEF	; 239
  6e:	8a bb       	out	0x1a, r24	; 26
	
	// set all PDx to output
	// PORT D is connected to 4 LEDS(PD4 to PD7)
	DDRD = 0xFF; // 1111 1111
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	81 bb       	out	0x11, r24	; 17
	
	uint8_t cnt = 15; // start counting from 15
  74:	9f e0       	ldi	r25, 0x0F	; 15
	uint8_t in = 0; // 1 if push button is pressed.
	
    while (1) 
    {
		// output current value of the counter to PORT D 
		PORTD = cnt << 4; // left shit 4 bit to show output in PD4 to PD7
  76:	89 2f       	mov	r24, r25
  78:	82 95       	swap	r24
  7a:	80 7f       	andi	r24, 0xF0	; 240
  7c:	82 bb       	out	0x12, r24	; 18
		
		// check if push button is pushed in PIN PA4
		in = PINA & (0x10) ; // PINA & (0001 0000)
		
		if(in){
  7e:	cc 9b       	sbis	0x19, 4	; 25
  80:	fa cf       	rjmp	.-12     	; 0x76 <main+0xa>
			// decrement count
			// cnt is set to 15 when it becomes -1
			cnt = (16+cnt-1)%16; 
  82:	89 2f       	mov	r24, r25
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0f 96       	adiw	r24, 0x0f	; 15
  88:	8f 70       	andi	r24, 0x0F	; 15
  8a:	90 78       	andi	r25, 0x80	; 128
  8c:	99 23       	and	r25, r25
  8e:	24 f4       	brge	.+8      	; 0x98 <main+0x2c>
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	80 6f       	ori	r24, 0xF0	; 240
  94:	9f 6f       	ori	r25, 0xFF	; 255
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	98 2f       	mov	r25, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e3       	ldi	r18, 0x3F	; 63
  9c:	3d e0       	ldi	r19, 0x0D	; 13
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
  ac:	e4 cf       	rjmp	.-56     	; 0x76 <main+0xa>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
